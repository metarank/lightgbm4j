/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.microsoft.ml.lightgbm;

public class int32ChunkedArray {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected int32ChunkedArray(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(int32ChunkedArray obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(int32ChunkedArray obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        lightgbmlibJNI.delete_int32ChunkedArray(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public int32ChunkedArray(long chunk_size) {
    this(lightgbmlibJNI.new_int32ChunkedArray(chunk_size), true);
  }

  public void add(int value) {
    lightgbmlibJNI.int32ChunkedArray_add(swigCPtr, this, value);
  }

  public long get_add_count() {
    return lightgbmlibJNI.int32ChunkedArray_get_add_count(swigCPtr, this);
  }

  public long get_chunks_count() {
    return lightgbmlibJNI.int32ChunkedArray_get_chunks_count(swigCPtr, this);
  }

  public long get_last_chunk_add_count() {
    return lightgbmlibJNI.int32ChunkedArray_get_last_chunk_add_count(swigCPtr, this);
  }

  public long get_chunk_size() {
    return lightgbmlibJNI.int32ChunkedArray_get_chunk_size(swigCPtr, this);
  }

  public SWIGTYPE_p_p_int data() {
    long cPtr = lightgbmlibJNI.int32ChunkedArray_data(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_int(cPtr, false);
  }

  public SWIGTYPE_p_p_void data_as_void() {
    long cPtr = lightgbmlibJNI.int32ChunkedArray_data_as_void(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_void(cPtr, false);
  }

  public void coalesce_to(SWIGTYPE_p_int other, boolean all_valid_addresses) {
    lightgbmlibJNI.int32ChunkedArray_coalesce_to__SWIG_0(swigCPtr, this, SWIGTYPE_p_int.getCPtr(other), all_valid_addresses);
  }

  public void coalesce_to(SWIGTYPE_p_int other) {
    lightgbmlibJNI.int32ChunkedArray_coalesce_to__SWIG_1(swigCPtr, this, SWIGTYPE_p_int.getCPtr(other));
  }

  public int getitem(long chunk_index, long index_within_chunk, int on_fail_value) {
    return lightgbmlibJNI.int32ChunkedArray_getitem(swigCPtr, this, chunk_index, index_within_chunk, on_fail_value);
  }

  public int setitem(long chunk_index, long index_within_chunk, int value) {
    return lightgbmlibJNI.int32ChunkedArray_setitem(swigCPtr, this, chunk_index, index_within_chunk, value);
  }

  public void clear() {
    lightgbmlibJNI.int32ChunkedArray_clear(swigCPtr, this);
  }

  public void release() {
    lightgbmlibJNI.int32ChunkedArray_release(swigCPtr, this);
  }

  public boolean within_bounds(long chunk_index, long index_within_chunk) {
    return lightgbmlibJNI.int32ChunkedArray_within_bounds(swigCPtr, this, chunk_index, index_within_chunk);
  }

  public void new_chunk() {
    lightgbmlibJNI.int32ChunkedArray_new_chunk(swigCPtr, this);
  }

}
